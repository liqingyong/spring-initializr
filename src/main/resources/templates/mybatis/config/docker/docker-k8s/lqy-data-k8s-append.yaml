#kubectl create -f lqy-data-k8s-append.yaml
#kubectl delete -f lqy-data-k8s-append.yaml
---
#deployment 创建
apiVersion: apps/v1
kind: Deployment
metadata:
  name: #【name】
  labels:
    app: #【name】
  namespace: fpcloud-server-ns
spec:
  replicas: 1
  selector: #标签选择器，与上面的标签共同作用
    matchLabels:  #选择包含标签app:#【name】的资源
      app: #【name】
  template: #这是选择或创建的Pod的模板
    metadata: #Pod的元数据
      labels: #Pod的标签，上面的selector即选择包含标签app:#【name】的Pod
        app: #【name】
    spec:  #期望Pod实现的功能（即在pod中部署）
      nodeName: isdcserver #指定调度节点为想要部署到的节点
      containers: #生成container，与docker中的container是同一种
        - name: #【name】
          image: 172.22.96.22:5000/fpcloud-data-distribute-mq:v1.0.0
          imagePullPolicy: IfNotPresent
          env:
            - name: NODE_HOST #获取宿主机ip spec.nodeName
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          ports:
            - containerPort: 8080 # 开启本容器的80端口可访问
          volumeMounts: #挂载持久存储卷
            - name: data
              mountPath: /data
            - name: cmad
              mountPath: /CMADAAS
#      tolerations:
#        - key: "key"
#          operator: "Equal"
#          value: "#【name】"
#          effect: "NoSchedule"
      volumes: #k8s的node对应的路径
        - name: data #和volumeMounts中的内容要对应 #和上面保持一致 这是本地的文件路径，上面是容器内部的路径
          hostPath:
            path: /data
            type: Directory
        - name: cmad #和volumeMounts中的内容要对应
          hostPath:
            path: /CMADAAS
            type: Directory
---
#Service创建
apiVersion: v1
kind: Service
metadata:
  labels:
    app: #【name】
  name: #【name】-sv
  namespace: fpcloud-server-ns
spec:
  ports:
    - port: 18080 #写#【name】本身端口
      name: #【name】-last
      protocol: TCP
      targetPort: 8080 # 容器#【name】对外开放的端口 上面的dm已经指定了
      nodePort: 18080 #外网访问的端口
  selector:
    app: #【name】    #选择包含标签app:#【name】的资源
  type: NodePort
